general:
  upstream_dns: udp://8.8.8.8:53
  bind_dns_over_udp: "0.0.0.0:53"
  bind_http: "0.0.0.0:80"
  # bind additional ports for HTTP. a list of portsor ranges separated by commas. example: "8080,8081-8083". follows the same listen address as bind_http
  bind_http_additional:
  # HTTPS Port to listen on. Should remain 443 in most cases
  bind_https: "0.0.0.0:443"
  # bind additional ports for HTTPS. a list of portsor ranges separated by commas. example: "8443,8444-8446". follows the same listen address as bind_https
  bind_https_additional:
  # Interface used for outbound TLS connections. uses OS prefered one if empty
  interface:
  # Preferred ip version for outgoing connections. choises: ipv4 (or 4), ipv6 (or 6), ipv4only, ipv6only, any. empty (or 0) means any.
  # numeric values are kept for backward compatibility
  preferred_version: "ipv4only"
  # log level for the application. choices: debug, info, warn, error
  # by default, the logs are colored so they are not suited for logging to a file.
  # in order to disable colors, set NO_COLOR=true in the environment variables
  log_level: info

acl:
  geoip:
    enabled: false
    # priority of the geoip filter. lower priority means it's checked first, meaning it can be ovveriden by other ACLs with higehr priority number.
    priority: 10
    # strictly blocked countries
    blocked:
    # allowed countries
    allowed:
    # Path to the MMDB file. eg: /tmp/Country.mmdb, https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country.mmdb
    path:
    # Interval to re-fetch the MMDB file
    refresh_interval: 24h0m0s
  # domain filtering
  domain:
    enabled: false # false means ALL domains will be allowed to go through the proxy
    # priority of the domain filter. lower priority means it's checked first. if multiple filters have the same priority, they're checked in random order
    priority: 20
    # Path to the domain list. eg: /tmp/domainlist.csv. Look at the example file for the format.
    path:
    # Interval to re-fetch the domain list
    refresh_interval: 1h0m0s
  # IP/CIDR filtering
  cidr:
    enabled: false
    # priority of the cidr filter. lower priority means it's checked first. if multiple filters have the same priority, they're checked in random order
    priority: 30
    # Path to the CIDR list. eg: /tmp/cidr.csv. Look at the example file for the format.
    path:
    # Interval to re-fetch the domain list
    refresh_interval: 1h0m0s
  # FQDN override. This ACL is used to override the destination IP to not be the one resolved by the upstream DNS or the proxy itself, rather a custom IP and port
  # if the destination is HTTP, it uses tls_cert and tls_key certificate to terminate the original connection.
  override:
    enabled: false
    # priority of the override filter. lower priority means it's checked first. if multiple filters have the same priority, they're checked in random order
    priority: 40
    # override rules. unlike others, this one does not require a path to a file. it's a map of FQDNs wildcards to IPs and ports. only HTTPS is supported
    # currently, these rules are checked with a simple for loop and string matching,
    # so it's not suited for a large number of rules. if you have a big list of rules
    # use a reverse proxy in front of sniproxy rather than using sniproxy as a reverse proxy
    rules:
      "one.one.one.one": "1.1.1.1:443"
      "google.com": "8.8.8.8:443"
    # enable listening on DoH on a specific SNI. example: "myawesomedoh.example.com". empty disables it. If you need DoH to be enabled and don't want
    # any other overrides, enable this ACL with empty rules. DoH SNI will add a default rule and start.
    doh_sni: "myawesomedoh.example.com"
    # Path to the certificate for handling tls decryption. eg: /tmp/mycert.pem
    tls_cert:
    # Path to the certificate key handling tls decryption. eg: /tmp/mycert.key
    tls_key:
